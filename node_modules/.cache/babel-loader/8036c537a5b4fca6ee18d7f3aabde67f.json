{"ast":null,"code":"/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __assign, __extends, __values } from \"tslib\";\nimport { MDCFoundation } from '@material/base/foundation';\nimport { ALWAYS_FLOAT_TYPES, cssClasses, numbers, strings, VALIDATION_ATTR_WHITELIST } from './constants';\nvar POINTERDOWN_EVENTS = ['mousedown', 'touchstart'];\nvar INTERACTION_EVENTS = ['click', 'keydown'];\n\nvar MDCTextFieldFoundation =\n/** @class */\nfunction (_super) {\n  __extends(MDCTextFieldFoundation, _super);\n  /**\n   * @param adapter\n   * @param foundationMap Map from subcomponent names to their subfoundations.\n   */\n\n\n  function MDCTextFieldFoundation(adapter, foundationMap) {\n    if (foundationMap === void 0) {\n      foundationMap = {};\n    }\n\n    var _this = _super.call(this, __assign(__assign({}, MDCTextFieldFoundation.defaultAdapter), adapter)) || this;\n\n    _this.isFocused = false;\n    _this.receivedUserInput = false;\n    _this.valid = true;\n    _this.useNativeValidation = true;\n    _this.validateOnValueChange = true;\n    _this.helperText = foundationMap.helperText;\n    _this.characterCounter = foundationMap.characterCounter;\n    _this.leadingIcon = foundationMap.leadingIcon;\n    _this.trailingIcon = foundationMap.trailingIcon;\n\n    _this.inputFocusHandler = function () {\n      _this.activateFocus();\n    };\n\n    _this.inputBlurHandler = function () {\n      _this.deactivateFocus();\n    };\n\n    _this.inputInputHandler = function () {\n      _this.handleInput();\n    };\n\n    _this.setPointerXOffset = function (evt) {\n      _this.setTransformOrigin(evt);\n    };\n\n    _this.textFieldInteractionHandler = function () {\n      _this.handleTextFieldInteraction();\n    };\n\n    _this.validationAttributeChangeHandler = function (attributesList) {\n      _this.handleValidationAttributeChange(attributesList);\n    };\n\n    return _this;\n  }\n\n  Object.defineProperty(MDCTextFieldFoundation, \"cssClasses\", {\n    get: function () {\n      return cssClasses;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MDCTextFieldFoundation, \"strings\", {\n    get: function () {\n      return strings;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MDCTextFieldFoundation, \"numbers\", {\n    get: function () {\n      return numbers;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MDCTextFieldFoundation.prototype, \"shouldAlwaysFloat\", {\n    get: function () {\n      var type = this.getNativeInput().type;\n      return ALWAYS_FLOAT_TYPES.indexOf(type) >= 0;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MDCTextFieldFoundation.prototype, \"shouldFloat\", {\n    get: function () {\n      return this.shouldAlwaysFloat || this.isFocused || !!this.getValue() || this.isBadInput();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MDCTextFieldFoundation.prototype, \"shouldShake\", {\n    get: function () {\n      return !this.isFocused && !this.isValid() && !!this.getValue();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MDCTextFieldFoundation, \"defaultAdapter\", {\n    /**\n     * See {@link MDCTextFieldAdapter} for typing information on parameters and\n     * return types.\n     */\n    get: function () {\n      // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.\n      return {\n        addClass: function () {\n          return undefined;\n        },\n        removeClass: function () {\n          return undefined;\n        },\n        hasClass: function () {\n          return true;\n        },\n        setInputAttr: function () {\n          return undefined;\n        },\n        removeInputAttr: function () {\n          return undefined;\n        },\n        registerTextFieldInteractionHandler: function () {\n          return undefined;\n        },\n        deregisterTextFieldInteractionHandler: function () {\n          return undefined;\n        },\n        registerInputInteractionHandler: function () {\n          return undefined;\n        },\n        deregisterInputInteractionHandler: function () {\n          return undefined;\n        },\n        registerValidationAttributeChangeHandler: function () {\n          return new MutationObserver(function () {\n            return undefined;\n          });\n        },\n        deregisterValidationAttributeChangeHandler: function () {\n          return undefined;\n        },\n        getNativeInput: function () {\n          return null;\n        },\n        isFocused: function () {\n          return false;\n        },\n        activateLineRipple: function () {\n          return undefined;\n        },\n        deactivateLineRipple: function () {\n          return undefined;\n        },\n        setLineRippleTransformOrigin: function () {\n          return undefined;\n        },\n        shakeLabel: function () {\n          return undefined;\n        },\n        floatLabel: function () {\n          return undefined;\n        },\n        setLabelRequired: function () {\n          return undefined;\n        },\n        hasLabel: function () {\n          return false;\n        },\n        getLabelWidth: function () {\n          return 0;\n        },\n        hasOutline: function () {\n          return false;\n        },\n        notchOutline: function () {\n          return undefined;\n        },\n        closeOutline: function () {\n          return undefined;\n        }\n      }; // tslint:enable:object-literal-sort-keys\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  MDCTextFieldFoundation.prototype.init = function () {\n    var e_1, _a, e_2, _b;\n\n    if (this.adapter.hasLabel() && this.getNativeInput().required) {\n      this.adapter.setLabelRequired(true);\n    }\n\n    if (this.adapter.isFocused()) {\n      this.inputFocusHandler();\n    } else if (this.adapter.hasLabel() && this.shouldFloat) {\n      this.notchOutline(true);\n      this.adapter.floatLabel(true);\n      this.styleFloating(true);\n    }\n\n    this.adapter.registerInputInteractionHandler('focus', this.inputFocusHandler);\n    this.adapter.registerInputInteractionHandler('blur', this.inputBlurHandler);\n    this.adapter.registerInputInteractionHandler('input', this.inputInputHandler);\n\n    try {\n      for (var POINTERDOWN_EVENTS_1 = __values(POINTERDOWN_EVENTS), POINTERDOWN_EVENTS_1_1 = POINTERDOWN_EVENTS_1.next(); !POINTERDOWN_EVENTS_1_1.done; POINTERDOWN_EVENTS_1_1 = POINTERDOWN_EVENTS_1.next()) {\n        var evtType = POINTERDOWN_EVENTS_1_1.value;\n        this.adapter.registerInputInteractionHandler(evtType, this.setPointerXOffset);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (POINTERDOWN_EVENTS_1_1 && !POINTERDOWN_EVENTS_1_1.done && (_a = POINTERDOWN_EVENTS_1.return)) _a.call(POINTERDOWN_EVENTS_1);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    try {\n      for (var INTERACTION_EVENTS_1 = __values(INTERACTION_EVENTS), INTERACTION_EVENTS_1_1 = INTERACTION_EVENTS_1.next(); !INTERACTION_EVENTS_1_1.done; INTERACTION_EVENTS_1_1 = INTERACTION_EVENTS_1.next()) {\n        var evtType = INTERACTION_EVENTS_1_1.value;\n        this.adapter.registerTextFieldInteractionHandler(evtType, this.textFieldInteractionHandler);\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (INTERACTION_EVENTS_1_1 && !INTERACTION_EVENTS_1_1.done && (_b = INTERACTION_EVENTS_1.return)) _b.call(INTERACTION_EVENTS_1);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n\n    this.validationObserver = this.adapter.registerValidationAttributeChangeHandler(this.validationAttributeChangeHandler);\n    this.setcharacterCounter(this.getValue().length);\n  };\n\n  MDCTextFieldFoundation.prototype.destroy = function () {\n    var e_3, _a, e_4, _b;\n\n    this.adapter.deregisterInputInteractionHandler('focus', this.inputFocusHandler);\n    this.adapter.deregisterInputInteractionHandler('blur', this.inputBlurHandler);\n    this.adapter.deregisterInputInteractionHandler('input', this.inputInputHandler);\n\n    try {\n      for (var POINTERDOWN_EVENTS_2 = __values(POINTERDOWN_EVENTS), POINTERDOWN_EVENTS_2_1 = POINTERDOWN_EVENTS_2.next(); !POINTERDOWN_EVENTS_2_1.done; POINTERDOWN_EVENTS_2_1 = POINTERDOWN_EVENTS_2.next()) {\n        var evtType = POINTERDOWN_EVENTS_2_1.value;\n        this.adapter.deregisterInputInteractionHandler(evtType, this.setPointerXOffset);\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (POINTERDOWN_EVENTS_2_1 && !POINTERDOWN_EVENTS_2_1.done && (_a = POINTERDOWN_EVENTS_2.return)) _a.call(POINTERDOWN_EVENTS_2);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    }\n\n    try {\n      for (var INTERACTION_EVENTS_2 = __values(INTERACTION_EVENTS), INTERACTION_EVENTS_2_1 = INTERACTION_EVENTS_2.next(); !INTERACTION_EVENTS_2_1.done; INTERACTION_EVENTS_2_1 = INTERACTION_EVENTS_2.next()) {\n        var evtType = INTERACTION_EVENTS_2_1.value;\n        this.adapter.deregisterTextFieldInteractionHandler(evtType, this.textFieldInteractionHandler);\n      }\n    } catch (e_4_1) {\n      e_4 = {\n        error: e_4_1\n      };\n    } finally {\n      try {\n        if (INTERACTION_EVENTS_2_1 && !INTERACTION_EVENTS_2_1.done && (_b = INTERACTION_EVENTS_2.return)) _b.call(INTERACTION_EVENTS_2);\n      } finally {\n        if (e_4) throw e_4.error;\n      }\n    }\n\n    this.adapter.deregisterValidationAttributeChangeHandler(this.validationObserver);\n  };\n  /**\n   * Handles user interactions with the Text Field.\n   */\n\n\n  MDCTextFieldFoundation.prototype.handleTextFieldInteraction = function () {\n    var nativeInput = this.adapter.getNativeInput();\n\n    if (nativeInput && nativeInput.disabled) {\n      return;\n    }\n\n    this.receivedUserInput = true;\n  };\n  /**\n   * Handles validation attribute changes\n   */\n\n\n  MDCTextFieldFoundation.prototype.handleValidationAttributeChange = function (attributesList) {\n    var _this = this;\n\n    attributesList.some(function (attributeName) {\n      if (VALIDATION_ATTR_WHITELIST.indexOf(attributeName) > -1) {\n        _this.styleValidity(true);\n\n        _this.adapter.setLabelRequired(_this.getNativeInput().required);\n\n        return true;\n      }\n\n      return false;\n    });\n\n    if (attributesList.indexOf('maxlength') > -1) {\n      this.setcharacterCounter(this.getValue().length);\n    }\n  };\n  /**\n   * Opens/closes the notched outline.\n   */\n\n\n  MDCTextFieldFoundation.prototype.notchOutline = function (openNotch) {\n    if (!this.adapter.hasOutline() || !this.adapter.hasLabel()) {\n      return;\n    }\n\n    if (openNotch) {\n      var labelWidth = this.adapter.getLabelWidth() * numbers.LABEL_SCALE;\n      this.adapter.notchOutline(labelWidth);\n    } else {\n      this.adapter.closeOutline();\n    }\n  };\n  /**\n   * Activates the text field focus state.\n   */\n\n\n  MDCTextFieldFoundation.prototype.activateFocus = function () {\n    this.isFocused = true;\n    this.styleFocused(this.isFocused);\n    this.adapter.activateLineRipple();\n\n    if (this.adapter.hasLabel()) {\n      this.notchOutline(this.shouldFloat);\n      this.adapter.floatLabel(this.shouldFloat);\n      this.styleFloating(this.shouldFloat);\n      this.adapter.shakeLabel(this.shouldShake);\n    }\n\n    if (this.helperText && (this.helperText.isPersistent() || !this.helperText.isValidation() || !this.valid)) {\n      this.helperText.showToScreenReader();\n    }\n  };\n  /**\n   * Sets the line ripple's transform origin, so that the line ripple activate\n   * animation will animate out from the user's click location.\n   */\n\n\n  MDCTextFieldFoundation.prototype.setTransformOrigin = function (evt) {\n    if (this.isDisabled() || this.adapter.hasOutline()) {\n      return;\n    }\n\n    var touches = evt.touches;\n    var targetEvent = touches ? touches[0] : evt;\n    var targetClientRect = targetEvent.target.getBoundingClientRect();\n    var normalizedX = targetEvent.clientX - targetClientRect.left;\n    this.adapter.setLineRippleTransformOrigin(normalizedX);\n  };\n  /**\n   * Handles input change of text input and text area.\n   */\n\n\n  MDCTextFieldFoundation.prototype.handleInput = function () {\n    this.autoCompleteFocus();\n    this.setcharacterCounter(this.getValue().length);\n  };\n  /**\n   * Activates the Text Field's focus state in cases when the input value\n   * changes without user input (e.g. programmatically).\n   */\n\n\n  MDCTextFieldFoundation.prototype.autoCompleteFocus = function () {\n    if (!this.receivedUserInput) {\n      this.activateFocus();\n    }\n  };\n  /**\n   * Deactivates the Text Field's focus state.\n   */\n\n\n  MDCTextFieldFoundation.prototype.deactivateFocus = function () {\n    this.isFocused = false;\n    this.adapter.deactivateLineRipple();\n    var isValid = this.isValid();\n    this.styleValidity(isValid);\n    this.styleFocused(this.isFocused);\n\n    if (this.adapter.hasLabel()) {\n      this.notchOutline(this.shouldFloat);\n      this.adapter.floatLabel(this.shouldFloat);\n      this.styleFloating(this.shouldFloat);\n      this.adapter.shakeLabel(this.shouldShake);\n    }\n\n    if (!this.shouldFloat) {\n      this.receivedUserInput = false;\n    }\n  };\n\n  MDCTextFieldFoundation.prototype.getValue = function () {\n    return this.getNativeInput().value;\n  };\n  /**\n   * @param value The value to set on the input Element.\n   */\n\n\n  MDCTextFieldFoundation.prototype.setValue = function (value) {\n    // Prevent Safari from moving the caret to the end of the input when the\n    // value has not changed.\n    if (this.getValue() !== value) {\n      this.getNativeInput().value = value;\n    }\n\n    this.setcharacterCounter(value.length);\n\n    if (this.validateOnValueChange) {\n      var isValid = this.isValid();\n      this.styleValidity(isValid);\n    }\n\n    if (this.adapter.hasLabel()) {\n      this.notchOutline(this.shouldFloat);\n      this.adapter.floatLabel(this.shouldFloat);\n      this.styleFloating(this.shouldFloat);\n\n      if (this.validateOnValueChange) {\n        this.adapter.shakeLabel(this.shouldShake);\n      }\n    }\n  };\n  /**\n   * @return The custom validity state, if set; otherwise, the result of a\n   *     native validity check.\n   */\n\n\n  MDCTextFieldFoundation.prototype.isValid = function () {\n    return this.useNativeValidation ? this.isNativeInputValid() : this.valid;\n  };\n  /**\n   * @param isValid Sets the custom validity state of the Text Field.\n   */\n\n\n  MDCTextFieldFoundation.prototype.setValid = function (isValid) {\n    this.valid = isValid;\n    this.styleValidity(isValid);\n    var shouldShake = !isValid && !this.isFocused && !!this.getValue();\n\n    if (this.adapter.hasLabel()) {\n      this.adapter.shakeLabel(shouldShake);\n    }\n  };\n  /**\n   * @param shouldValidate Whether or not validity should be updated on\n   *     value change.\n   */\n\n\n  MDCTextFieldFoundation.prototype.setValidateOnValueChange = function (shouldValidate) {\n    this.validateOnValueChange = shouldValidate;\n  };\n  /**\n   * @return Whether or not validity should be updated on value change. `true`\n   *     by default.\n   */\n\n\n  MDCTextFieldFoundation.prototype.getValidateOnValueChange = function () {\n    return this.validateOnValueChange;\n  };\n  /**\n   * Enables or disables the use of native validation. Use this for custom\n   * validation.\n   * @param useNativeValidation Set this to false to ignore native input\n   *     validation.\n   */\n\n\n  MDCTextFieldFoundation.prototype.setUseNativeValidation = function (useNativeValidation) {\n    this.useNativeValidation = useNativeValidation;\n  };\n\n  MDCTextFieldFoundation.prototype.isDisabled = function () {\n    return this.getNativeInput().disabled;\n  };\n  /**\n   * @param disabled Sets the text-field disabled or enabled.\n   */\n\n\n  MDCTextFieldFoundation.prototype.setDisabled = function (disabled) {\n    this.getNativeInput().disabled = disabled;\n    this.styleDisabled(disabled);\n  };\n  /**\n   * @param content Sets the content of the helper text.\n   */\n\n\n  MDCTextFieldFoundation.prototype.setHelperTextContent = function (content) {\n    if (this.helperText) {\n      this.helperText.setContent(content);\n    }\n  };\n  /**\n   * Sets the aria label of the leading icon.\n   */\n\n\n  MDCTextFieldFoundation.prototype.setLeadingIconAriaLabel = function (label) {\n    if (this.leadingIcon) {\n      this.leadingIcon.setAriaLabel(label);\n    }\n  };\n  /**\n   * Sets the text content of the leading icon.\n   */\n\n\n  MDCTextFieldFoundation.prototype.setLeadingIconContent = function (content) {\n    if (this.leadingIcon) {\n      this.leadingIcon.setContent(content);\n    }\n  };\n  /**\n   * Sets the aria label of the trailing icon.\n   */\n\n\n  MDCTextFieldFoundation.prototype.setTrailingIconAriaLabel = function (label) {\n    if (this.trailingIcon) {\n      this.trailingIcon.setAriaLabel(label);\n    }\n  };\n  /**\n   * Sets the text content of the trailing icon.\n   */\n\n\n  MDCTextFieldFoundation.prototype.setTrailingIconContent = function (content) {\n    if (this.trailingIcon) {\n      this.trailingIcon.setContent(content);\n    }\n  };\n  /**\n   * Sets character counter values that shows characters used and the total\n   * character limit.\n   */\n\n\n  MDCTextFieldFoundation.prototype.setcharacterCounter = function (currentLength) {\n    if (!this.characterCounter) {\n      return;\n    }\n\n    var maxLength = this.getNativeInput().maxLength;\n\n    if (maxLength === -1) {\n      throw new Error('MDCTextFieldFoundation: Expected maxlength html property on text input or textarea.');\n    }\n\n    this.characterCounter.setCounterValue(currentLength, maxLength);\n  };\n  /**\n   * @return True if the Text Field input fails in converting the user-supplied\n   *     value.\n   */\n\n\n  MDCTextFieldFoundation.prototype.isBadInput = function () {\n    // The badInput property is not supported in IE 11 💩.\n    return this.getNativeInput().validity.badInput || false;\n  };\n  /**\n   * @return The result of native validity checking (ValidityState.valid).\n   */\n\n\n  MDCTextFieldFoundation.prototype.isNativeInputValid = function () {\n    return this.getNativeInput().validity.valid;\n  };\n  /**\n   * Styles the component based on the validity state.\n   */\n\n\n  MDCTextFieldFoundation.prototype.styleValidity = function (isValid) {\n    var INVALID = MDCTextFieldFoundation.cssClasses.INVALID;\n\n    if (isValid) {\n      this.adapter.removeClass(INVALID);\n    } else {\n      this.adapter.addClass(INVALID);\n    }\n\n    if (this.helperText) {\n      this.helperText.setValidity(isValid); // We dynamically set or unset aria-describedby for validation helper text\n      // only, based on whether the field is valid\n\n      var helperTextValidation = this.helperText.isValidation();\n\n      if (!helperTextValidation) {\n        return;\n      }\n\n      var helperTextVisible = this.helperText.isVisible();\n      var helperTextId = this.helperText.getId();\n\n      if (helperTextVisible && helperTextId) {\n        this.adapter.setInputAttr(strings.ARIA_DESCRIBEDBY, helperTextId);\n      } else {\n        this.adapter.removeInputAttr(strings.ARIA_DESCRIBEDBY);\n      }\n    }\n  };\n  /**\n   * Styles the component based on the focused state.\n   */\n\n\n  MDCTextFieldFoundation.prototype.styleFocused = function (isFocused) {\n    var FOCUSED = MDCTextFieldFoundation.cssClasses.FOCUSED;\n\n    if (isFocused) {\n      this.adapter.addClass(FOCUSED);\n    } else {\n      this.adapter.removeClass(FOCUSED);\n    }\n  };\n  /**\n   * Styles the component based on the disabled state.\n   */\n\n\n  MDCTextFieldFoundation.prototype.styleDisabled = function (isDisabled) {\n    var _a = MDCTextFieldFoundation.cssClasses,\n        DISABLED = _a.DISABLED,\n        INVALID = _a.INVALID;\n\n    if (isDisabled) {\n      this.adapter.addClass(DISABLED);\n      this.adapter.removeClass(INVALID);\n    } else {\n      this.adapter.removeClass(DISABLED);\n    }\n\n    if (this.leadingIcon) {\n      this.leadingIcon.setDisabled(isDisabled);\n    }\n\n    if (this.trailingIcon) {\n      this.trailingIcon.setDisabled(isDisabled);\n    }\n  };\n  /**\n   * Styles the component based on the label floating state.\n   */\n\n\n  MDCTextFieldFoundation.prototype.styleFloating = function (isFloating) {\n    var LABEL_FLOATING = MDCTextFieldFoundation.cssClasses.LABEL_FLOATING;\n\n    if (isFloating) {\n      this.adapter.addClass(LABEL_FLOATING);\n    } else {\n      this.adapter.removeClass(LABEL_FLOATING);\n    }\n  };\n  /**\n   * @return The native text input element from the host environment, or an\n   *     object with the same shape for unit tests.\n   */\n\n\n  MDCTextFieldFoundation.prototype.getNativeInput = function () {\n    // this.adapter may be undefined in foundation unit tests. This happens when\n    // testdouble is creating a mock object and invokes the\n    // shouldShake/shouldFloat getters (which in turn call getValue(), which\n    // calls this method) before init() has been called from the MDCTextField\n    // constructor. To work around that issue, we return a dummy object.\n    var nativeInput = this.adapter ? this.adapter.getNativeInput() : null;\n    return nativeInput || {\n      disabled: false,\n      maxLength: -1,\n      required: false,\n      type: 'input',\n      validity: {\n        badInput: false,\n        valid: true\n      },\n      value: ''\n    };\n  };\n\n  return MDCTextFieldFoundation;\n}(MDCFoundation);\n\nexport { MDCTextFieldFoundation }; // tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\n\nexport default MDCTextFieldFoundation;","map":{"version":3,"mappings":"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","names":["MDCFoundation","ALWAYS_FLOAT_TYPES","cssClasses","numbers","strings","VALIDATION_ATTR_WHITELIST","POINTERDOWN_EVENTS","INTERACTION_EVENTS","__extends","adapter","foundationMap","_super","MDCTextFieldFoundation","defaultAdapter","_this","helperText","characterCounter","leadingIcon","trailingIcon","inputFocusHandler","activateFocus","inputBlurHandler","deactivateFocus","inputInputHandler","handleInput","setPointerXOffset","evt","setTransformOrigin","textFieldInteractionHandler","handleTextFieldInteraction","validationAttributeChangeHandler","attributesList","handleValidationAttributeChange","Object","type","getNativeInput","indexOf","shouldAlwaysFloat","isFocused","getValue","isBadInput","isValid","addClass","removeClass","hasClass","setInputAttr","removeInputAttr","registerTextFieldInteractionHandler","deregisterTextFieldInteractionHandler","registerInputInteractionHandler","deregisterInputInteractionHandler","registerValidationAttributeChangeHandler","MutationObserver","deregisterValidationAttributeChangeHandler","activateLineRipple","deactivateLineRipple","setLineRippleTransformOrigin","shakeLabel","floatLabel","setLabelRequired","hasLabel","getLabelWidth","hasOutline","notchOutline","closeOutline","required","shouldFloat","styleFloating","POINTERDOWN_EVENTS_1_1","evtType","INTERACTION_EVENTS_1_1","validationObserver","setcharacterCounter","length","POINTERDOWN_EVENTS_2_1","INTERACTION_EVENTS_2_1","nativeInput","disabled","receivedUserInput","some","attributeName","styleValidity","openNotch","labelWidth","LABEL_SCALE","styleFocused","shouldShake","isPersistent","isValidation","valid","showToScreenReader","isDisabled","touches","targetEvent","targetClientRect","target","getBoundingClientRect","normalizedX","clientX","left","autoCompleteFocus","value","validateOnValueChange","useNativeValidation","isNativeInputValid","shouldValidate","styleDisabled","content","setContent","label","setAriaLabel","currentLength","maxLength","Error","setCounterValue","validity","badInput","INVALID","setValidity","helperTextValidation","helperTextVisible","isVisible","helperTextId","getId","ARIA_DESCRIBEDBY","FOCUSED","DISABLED","setDisabled","isFloating","LABEL_FLOATING"],"sources":["foundation.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}