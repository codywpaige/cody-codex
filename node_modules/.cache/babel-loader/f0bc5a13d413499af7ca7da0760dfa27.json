{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __assign, __extends } from \"tslib\";\nimport { MDCFoundation } from '@material/base/foundation';\nimport { cssClasses, strings } from './constants';\n\nvar MDCTextFieldHelperTextFoundation =\n/** @class */\nfunction (_super) {\n  __extends(MDCTextFieldHelperTextFoundation, _super);\n\n  function MDCTextFieldHelperTextFoundation(adapter) {\n    return _super.call(this, __assign(__assign({}, MDCTextFieldHelperTextFoundation.defaultAdapter), adapter)) || this;\n  }\n\n  Object.defineProperty(MDCTextFieldHelperTextFoundation, \"cssClasses\", {\n    get: function () {\n      return cssClasses;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MDCTextFieldHelperTextFoundation, \"strings\", {\n    get: function () {\n      return strings;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MDCTextFieldHelperTextFoundation, \"defaultAdapter\", {\n    /**\n     * See {@link MDCTextFieldHelperTextAdapter} for typing information on parameters and return types.\n     */\n    get: function () {\n      // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.\n      return {\n        addClass: function () {\n          return undefined;\n        },\n        removeClass: function () {\n          return undefined;\n        },\n        hasClass: function () {\n          return false;\n        },\n        getAttr: function () {\n          return null;\n        },\n        setAttr: function () {\n          return undefined;\n        },\n        removeAttr: function () {\n          return undefined;\n        },\n        setContent: function () {\n          return undefined;\n        }\n      }; // tslint:enable:object-literal-sort-keys\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  MDCTextFieldHelperTextFoundation.prototype.getId = function () {\n    return this.adapter.getAttr('id');\n  };\n\n  MDCTextFieldHelperTextFoundation.prototype.isVisible = function () {\n    return this.adapter.getAttr(strings.ARIA_HIDDEN) !== 'true';\n  };\n  /**\n   * Sets the content of the helper text field.\n   */\n\n\n  MDCTextFieldHelperTextFoundation.prototype.setContent = function (content) {\n    this.adapter.setContent(content);\n  };\n\n  MDCTextFieldHelperTextFoundation.prototype.isPersistent = function () {\n    return this.adapter.hasClass(cssClasses.HELPER_TEXT_PERSISTENT);\n  };\n  /**\n   * @param isPersistent Sets the persistency of the helper text.\n   */\n\n\n  MDCTextFieldHelperTextFoundation.prototype.setPersistent = function (isPersistent) {\n    if (isPersistent) {\n      this.adapter.addClass(cssClasses.HELPER_TEXT_PERSISTENT);\n    } else {\n      this.adapter.removeClass(cssClasses.HELPER_TEXT_PERSISTENT);\n    }\n  };\n  /**\n   * @return whether the helper text acts as an error validation message.\n   */\n\n\n  MDCTextFieldHelperTextFoundation.prototype.isValidation = function () {\n    return this.adapter.hasClass(cssClasses.HELPER_TEXT_VALIDATION_MSG);\n  };\n  /**\n   * @param isValidation True to make the helper text act as an error validation message.\n   */\n\n\n  MDCTextFieldHelperTextFoundation.prototype.setValidation = function (isValidation) {\n    if (isValidation) {\n      this.adapter.addClass(cssClasses.HELPER_TEXT_VALIDATION_MSG);\n    } else {\n      this.adapter.removeClass(cssClasses.HELPER_TEXT_VALIDATION_MSG);\n    }\n  };\n  /**\n   * Makes the helper text visible to the screen reader.\n   */\n\n\n  MDCTextFieldHelperTextFoundation.prototype.showToScreenReader = function () {\n    this.adapter.removeAttr(strings.ARIA_HIDDEN);\n  };\n  /**\n   * Sets the validity of the helper text based on the input validity.\n   */\n\n\n  MDCTextFieldHelperTextFoundation.prototype.setValidity = function (inputIsValid) {\n    var helperTextIsPersistent = this.adapter.hasClass(cssClasses.HELPER_TEXT_PERSISTENT);\n    var helperTextIsValidationMsg = this.adapter.hasClass(cssClasses.HELPER_TEXT_VALIDATION_MSG);\n    var validationMsgNeedsDisplay = helperTextIsValidationMsg && !inputIsValid;\n\n    if (validationMsgNeedsDisplay) {\n      this.showToScreenReader(); // If role is already alert, refresh it to trigger another announcement\n      // from screenreader.\n\n      if (this.adapter.getAttr(strings.ROLE) === 'alert') {\n        this.refreshAlertRole();\n      } else {\n        this.adapter.setAttr(strings.ROLE, 'alert');\n      }\n    } else {\n      this.adapter.removeAttr(strings.ROLE);\n    }\n\n    if (!helperTextIsPersistent && !validationMsgNeedsDisplay) {\n      this.hide();\n    }\n  };\n  /**\n   * Hides the help text from screen readers.\n   */\n\n\n  MDCTextFieldHelperTextFoundation.prototype.hide = function () {\n    this.adapter.setAttr(strings.ARIA_HIDDEN, 'true');\n  };\n\n  MDCTextFieldHelperTextFoundation.prototype.refreshAlertRole = function () {\n    var _this = this;\n\n    this.adapter.removeAttr(strings.ROLE);\n    requestAnimationFrame(function () {\n      _this.adapter.setAttr(strings.ROLE, 'alert');\n    });\n  };\n\n  return MDCTextFieldHelperTextFoundation;\n}(MDCFoundation);\n\nexport { MDCTextFieldHelperTextFoundation }; // tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\n\nexport default MDCTextFieldHelperTextFoundation;","map":{"version":3,"mappings":"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","names":["MDCFoundation","cssClasses","strings","__extends","adapter","_super","MDCTextFieldHelperTextFoundation","defaultAdapter","Object","addClass","removeClass","hasClass","getAttr","setAttr","removeAttr","setContent","ARIA_HIDDEN","content","HELPER_TEXT_PERSISTENT","isPersistent","HELPER_TEXT_VALIDATION_MSG","isValidation","inputIsValid","helperTextIsPersistent","helperTextIsValidationMsg","validationMsgNeedsDisplay","showToScreenReader","ROLE","refreshAlertRole","hide","requestAnimationFrame","_this"],"sources":["foundation.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}