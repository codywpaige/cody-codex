{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __assign, __extends } from \"tslib\";\nimport { MDCFoundation } from '@material/base/foundation';\nimport { cssClasses, numbers, strings } from './constants';\n\nvar MDCNotchedOutlineFoundation =\n/** @class */\nfunction (_super) {\n  __extends(MDCNotchedOutlineFoundation, _super);\n\n  function MDCNotchedOutlineFoundation(adapter) {\n    return _super.call(this, __assign(__assign({}, MDCNotchedOutlineFoundation.defaultAdapter), adapter)) || this;\n  }\n\n  Object.defineProperty(MDCNotchedOutlineFoundation, \"strings\", {\n    get: function () {\n      return strings;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MDCNotchedOutlineFoundation, \"cssClasses\", {\n    get: function () {\n      return cssClasses;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MDCNotchedOutlineFoundation, \"numbers\", {\n    get: function () {\n      return numbers;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MDCNotchedOutlineFoundation, \"defaultAdapter\", {\n    /**\n     * See {@link MDCNotchedOutlineAdapter} for typing information on parameters and return types.\n     */\n    get: function () {\n      // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.\n      return {\n        addClass: function () {\n          return undefined;\n        },\n        removeClass: function () {\n          return undefined;\n        },\n        setNotchWidthProperty: function () {\n          return undefined;\n        },\n        removeNotchWidthProperty: function () {\n          return undefined;\n        }\n      }; // tslint:enable:object-literal-sort-keys\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Adds the outline notched selector and updates the notch width calculated based off of notchWidth.\n   */\n\n  MDCNotchedOutlineFoundation.prototype.notch = function (notchWidth) {\n    var OUTLINE_NOTCHED = MDCNotchedOutlineFoundation.cssClasses.OUTLINE_NOTCHED;\n\n    if (notchWidth > 0) {\n      notchWidth += numbers.NOTCH_ELEMENT_PADDING; // Add padding from left/right.\n    }\n\n    this.adapter.setNotchWidthProperty(notchWidth);\n    this.adapter.addClass(OUTLINE_NOTCHED);\n  };\n  /**\n   * Removes notched outline selector to close the notch in the outline.\n   */\n\n\n  MDCNotchedOutlineFoundation.prototype.closeNotch = function () {\n    var OUTLINE_NOTCHED = MDCNotchedOutlineFoundation.cssClasses.OUTLINE_NOTCHED;\n    this.adapter.removeClass(OUTLINE_NOTCHED);\n    this.adapter.removeNotchWidthProperty();\n  };\n\n  return MDCNotchedOutlineFoundation;\n}(MDCFoundation);\n\nexport { MDCNotchedOutlineFoundation }; // tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\n\nexport default MDCNotchedOutlineFoundation;","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;AAuBA,SAAQA,aAAR,QAA4B,2BAA5B;AAEA,SAAQC,UAAR,EAAoBC,OAApB,EAA6BC,OAA7B,QAA2C,aAA3C;;AAEA;AAAA;AAAA;EAAiDC;;EA2B/C,qCAAYC,OAAZ,EAAuD;WACrDC,wCAAUC,2BAA2B,CAACC,cAAtC,GAAyDH,OAAzD,MAAkE;EACnE;;EA5BDI,sBAAoBF,2BAApB,EAAoB,SAApB,EAA2B;SAA3B;MACE,OAAOJ,OAAP;IACD,CAF0B;qBAAA;;EAAA,CAA3B;EAIAM,sBAAoBF,2BAApB,EAAoB,YAApB,EAA8B;SAA9B;MACE,OAAON,UAAP;IACD,CAF6B;qBAAA;;EAAA,CAA9B;EAIAQ,sBAAoBF,2BAApB,EAAoB,SAApB,EAA2B;SAA3B;MACE,OAAOL,OAAP;IACD,CAF0B;qBAAA;;EAAA,CAA3B;EAOAO,sBAAoBF,2BAApB,EAAoB,gBAApB,EAAkC;IAHlC;;;SAGA;MACE;MACA,OAAO;QACLG,QAAQ,EAAE;UAAM;QAAS,CADpB;QAELC,WAAW,EAAE;UAAM;QAAS,CAFvB;QAGLC,qBAAqB,EAAE;UAAM;QAAS,CAHjC;QAILC,wBAAwB,EAAE;UAAM;QAAS;MAJpC,CAAP,CAFF,CAQE;IACD,CATiC;qBAAA;;EAAA,CAAlC;EAeA;;;;EAGAN,wDAAMO,UAAN,EAAwB;IACf,mBAAe,GAAIP,2BAA2B,CAACN,UAA5B,CAAsCc,eAAzD;;IAEP,IAAID,UAAU,GAAG,CAAjB,EAAoB;MAClBA,UAAU,IAAIZ,OAAO,CAACc,qBAAtB,CADkB,CAC2B;IAC9C;;IAED,KAAKX,OAAL,CAAaO,qBAAb,CAAmCE,UAAnC;IACA,KAAKT,OAAL,CAAaK,QAAb,CAAsBK,eAAtB;EACD,CATD;EAWA;;;;;EAGAR;IACS,mBAAe,GAAIA,2BAA2B,CAACN,UAA5B,CAAsCc,eAAzD;IACP,KAAKV,OAAL,CAAaM,WAAb,CAAyBI,eAAzB;IACA,KAAKV,OAAL,CAAaQ,wBAAb;EACD,CAJD;;EAKF;AAAC,CArDD,CAAiDb,aAAjD;;wCAuDA;;AACA,eAAeO,2BAAf","names":["MDCFoundation","cssClasses","numbers","strings","__extends","adapter","_super","MDCNotchedOutlineFoundation","defaultAdapter","Object","addClass","removeClass","setNotchWidthProperty","removeNotchWidthProperty","notchWidth","OUTLINE_NOTCHED","NOTCH_ELEMENT_PADDING"],"sources":["foundation.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}