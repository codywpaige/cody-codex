{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __extends } from \"tslib\";\nimport { MDCComponent } from '@material/base/component';\nimport { MDCFloatingLabelFoundation } from '@material/floating-label/foundation';\nimport { cssClasses, strings } from './constants';\nimport { MDCNotchedOutlineFoundation } from './foundation';\n\nvar MDCNotchedOutline =\n/** @class */\nfunction (_super) {\n  __extends(MDCNotchedOutline, _super);\n\n  function MDCNotchedOutline() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  MDCNotchedOutline.attachTo = function (root) {\n    return new MDCNotchedOutline(root);\n  };\n\n  MDCNotchedOutline.prototype.initialSyncWithDOM = function () {\n    this.notchElement = this.root.querySelector(strings.NOTCH_ELEMENT_SELECTOR);\n    var label = this.root.querySelector('.' + MDCFloatingLabelFoundation.cssClasses.ROOT);\n\n    if (label) {\n      label.style.transitionDuration = '0s';\n      this.root.classList.add(cssClasses.OUTLINE_UPGRADED);\n      requestAnimationFrame(function () {\n        label.style.transitionDuration = '';\n      });\n    } else {\n      this.root.classList.add(cssClasses.NO_LABEL);\n    }\n  };\n  /**\n   * Updates classes and styles to open the notch to the specified width.\n   * @param notchWidth The notch width in the outline.\n   */\n\n\n  MDCNotchedOutline.prototype.notch = function (notchWidth) {\n    this.foundation.notch(notchWidth);\n  };\n  /**\n   * Updates classes and styles to close the notch.\n   */\n\n\n  MDCNotchedOutline.prototype.closeNotch = function () {\n    this.foundation.closeNotch();\n  };\n\n  MDCNotchedOutline.prototype.getDefaultFoundation = function () {\n    var _this = this; // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.\n    // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.\n    // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.\n\n\n    var adapter = {\n      addClass: function (className) {\n        return _this.root.classList.add(className);\n      },\n      removeClass: function (className) {\n        return _this.root.classList.remove(className);\n      },\n      setNotchWidthProperty: function (width) {\n        _this.notchElement.style.setProperty('width', width + 'px');\n      },\n      removeNotchWidthProperty: function () {\n        _this.notchElement.style.removeProperty('width');\n      }\n    }; // tslint:enable:object-literal-sort-keys\n\n    return new MDCNotchedOutlineFoundation(adapter);\n  };\n\n  return MDCNotchedOutline;\n}(MDCComponent);\n\nexport { MDCNotchedOutline };","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;AAuBA,SAAQA,YAAR,QAA2B,0BAA3B;AACA,SAAQC,0BAAR,QAAyC,qCAAzC;AAEA,SAAQC,UAAR,EAAoBC,OAApB,QAAkC,aAAlC;AACA,SAAQC,2BAAR,QAA0C,cAA1C;;AAIA;AAAA;AAAA;EAAuCC;;EAAvC;;EAwDC;;EAvDiBC,6BAAhB,UAAyBC,IAAzB,EAAsC;IACpC,OAAO,IAAID,iBAAJ,CAAsBC,IAAtB,CAAP;EACD,CAFe;;EAMPD,iDAAT;IACE,KAAKE,YAAL,GACI,KAAKD,IAAL,CAAUE,aAAV,CAAqCN,OAAO,CAACO,sBAA7C,CADJ;IAGA,IAAMC,KAAK,GAAG,KAAKJ,IAAL,CAAUE,aAAV,CACV,MAAMR,0BAA0B,CAACC,UAA3B,CAAsCU,IADlC,CAAd;;IAEA,IAAID,KAAJ,EAAW;MACTA,KAAK,CAACE,KAAN,CAAYC,kBAAZ,GAAiC,IAAjC;MACA,KAAKP,IAAL,CAAUQ,SAAV,CAAoBC,GAApB,CAAwBd,UAAU,CAACe,gBAAnC;MACAC,qBAAqB,CAAC;QACpBP,KAAK,CAACE,KAAN,CAAYC,kBAAZ,GAAiC,EAAjC;MACD,CAFoB,CAArB;IAGD,CAND,MAMO;MACL,KAAKP,IAAL,CAAUQ,SAAV,CAAoBC,GAApB,CAAwBd,UAAU,CAACiB,QAAnC;IACD;EACF,CAfQ;EAiBT;;;;;;EAIAb,8CAAMc,UAAN,EAAwB;IACtB,KAAKC,UAAL,CAAgBC,KAAhB,CAAsBF,UAAtB;EACD,CAFD;EAIA;;;;;EAGAd;IACE,KAAKe,UAAL,CAAgBE,UAAhB;EACD,CAFD;;EAISjB,mDAAT;IAAA,kBACE;IACA;IACA;;;IACA,IAAMkB,OAAO,GAA6B;MACxCC,QAAQ,EAAE,UAACC,SAAD,EAAU;QAAK,YAAI,CAACnB,IAAL,CAAUQ,SAAV,CAAoBC,GAApB,CAAwBU,SAAxB;MAAkC,CADnB;MAExCC,WAAW,EAAE,UAACD,SAAD,EAAU;QAAK,YAAI,CAACnB,IAAL,CAAUQ,SAAV,CAAoBa,MAApB,CAA2BF,SAA3B;MAAqC,CAFzB;MAGxCG,qBAAqB,EAAE,UAACC,KAAD,EAAM;QAC3BC,KAAI,CAACvB,YAAL,CAAkBK,KAAlB,CAAwBmB,WAAxB,CAAoC,OAApC,EAA6CF,KAAK,GAAG,IAArD;MACD,CALuC;MAMxCG,wBAAwB,EAAE;QACxBF,KAAI,CAACvB,YAAL,CAAkBK,KAAlB,CAAwBqB,cAAxB,CAAuC,OAAvC;MACD;IARuC,CAA1C,CAJF,CAcE;;IACA,OAAO,IAAI9B,2BAAJ,CAAgCoB,OAAhC,CAAP;EACD,CAhBQ;;EAiBX;AAAC,CAxDD,CAAuCxB,YAAvC","names":["MDCComponent","MDCFloatingLabelFoundation","cssClasses","strings","MDCNotchedOutlineFoundation","__extends","MDCNotchedOutline","root","notchElement","querySelector","NOTCH_ELEMENT_SELECTOR","label","ROOT","style","transitionDuration","classList","add","OUTLINE_UPGRADED","requestAnimationFrame","NO_LABEL","notchWidth","foundation","notch","closeNotch","adapter","addClass","className","removeClass","remove","setNotchWidthProperty","width","_this","setProperty","removeNotchWidthProperty","removeProperty"],"sources":["component.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}