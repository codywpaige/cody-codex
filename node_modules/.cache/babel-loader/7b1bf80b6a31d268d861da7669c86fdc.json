{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __assign, __extends, __values } from \"tslib\";\nimport { MDCFoundation } from '@material/base/foundation';\nimport { cssClasses, strings } from './constants';\nvar INTERACTION_EVENTS = ['click', 'keydown'];\n\nvar MDCTextFieldIconFoundation =\n/** @class */\nfunction (_super) {\n  __extends(MDCTextFieldIconFoundation, _super);\n\n  function MDCTextFieldIconFoundation(adapter) {\n    var _this = _super.call(this, __assign(__assign({}, MDCTextFieldIconFoundation.defaultAdapter), adapter)) || this;\n\n    _this.savedTabIndex = null;\n\n    _this.interactionHandler = function (evt) {\n      _this.handleInteraction(evt);\n    };\n\n    return _this;\n  }\n\n  Object.defineProperty(MDCTextFieldIconFoundation, \"strings\", {\n    get: function () {\n      return strings;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MDCTextFieldIconFoundation, \"cssClasses\", {\n    get: function () {\n      return cssClasses;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MDCTextFieldIconFoundation, \"defaultAdapter\", {\n    /**\n     * See {@link MDCTextFieldIconAdapter} for typing information on parameters and return types.\n     */\n    get: function () {\n      // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.\n      return {\n        getAttr: function () {\n          return null;\n        },\n        setAttr: function () {\n          return undefined;\n        },\n        removeAttr: function () {\n          return undefined;\n        },\n        setContent: function () {\n          return undefined;\n        },\n        registerInteractionHandler: function () {\n          return undefined;\n        },\n        deregisterInteractionHandler: function () {\n          return undefined;\n        },\n        notifyIconAction: function () {\n          return undefined;\n        }\n      }; // tslint:enable:object-literal-sort-keys\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  MDCTextFieldIconFoundation.prototype.init = function () {\n    var e_1, _a;\n\n    this.savedTabIndex = this.adapter.getAttr('tabindex');\n\n    try {\n      for (var INTERACTION_EVENTS_1 = __values(INTERACTION_EVENTS), INTERACTION_EVENTS_1_1 = INTERACTION_EVENTS_1.next(); !INTERACTION_EVENTS_1_1.done; INTERACTION_EVENTS_1_1 = INTERACTION_EVENTS_1.next()) {\n        var evtType = INTERACTION_EVENTS_1_1.value;\n        this.adapter.registerInteractionHandler(evtType, this.interactionHandler);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (INTERACTION_EVENTS_1_1 && !INTERACTION_EVENTS_1_1.done && (_a = INTERACTION_EVENTS_1.return)) _a.call(INTERACTION_EVENTS_1);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  };\n\n  MDCTextFieldIconFoundation.prototype.destroy = function () {\n    var e_2, _a;\n\n    try {\n      for (var INTERACTION_EVENTS_2 = __values(INTERACTION_EVENTS), INTERACTION_EVENTS_2_1 = INTERACTION_EVENTS_2.next(); !INTERACTION_EVENTS_2_1.done; INTERACTION_EVENTS_2_1 = INTERACTION_EVENTS_2.next()) {\n        var evtType = INTERACTION_EVENTS_2_1.value;\n        this.adapter.deregisterInteractionHandler(evtType, this.interactionHandler);\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (INTERACTION_EVENTS_2_1 && !INTERACTION_EVENTS_2_1.done && (_a = INTERACTION_EVENTS_2.return)) _a.call(INTERACTION_EVENTS_2);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n  };\n\n  MDCTextFieldIconFoundation.prototype.setDisabled = function (disabled) {\n    if (!this.savedTabIndex) {\n      return;\n    }\n\n    if (disabled) {\n      this.adapter.setAttr('tabindex', '-1');\n      this.adapter.removeAttr('role');\n    } else {\n      this.adapter.setAttr('tabindex', this.savedTabIndex);\n      this.adapter.setAttr('role', strings.ICON_ROLE);\n    }\n  };\n\n  MDCTextFieldIconFoundation.prototype.setAriaLabel = function (label) {\n    this.adapter.setAttr('aria-label', label);\n  };\n\n  MDCTextFieldIconFoundation.prototype.setContent = function (content) {\n    this.adapter.setContent(content);\n  };\n\n  MDCTextFieldIconFoundation.prototype.handleInteraction = function (evt) {\n    var isEnterKey = evt.key === 'Enter' || evt.keyCode === 13;\n\n    if (evt.type === 'click' || isEnterKey) {\n      evt.preventDefault(); // stop click from causing host label to focus\n      // input\n\n      this.adapter.notifyIconAction();\n    }\n  };\n\n  return MDCTextFieldIconFoundation;\n}(MDCFoundation);\n\nexport { MDCTextFieldIconFoundation }; // tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\n\nexport default MDCTextFieldIconFoundation;","map":{"version":3,"mappings":"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","names":["MDCFoundation","cssClasses","strings","INTERACTION_EVENTS","__extends","adapter","_super","MDCTextFieldIconFoundation","defaultAdapter","_this","interactionHandler","evt","handleInteraction","Object","getAttr","setAttr","removeAttr","setContent","registerInteractionHandler","deregisterInteractionHandler","notifyIconAction","savedTabIndex","INTERACTION_EVENTS_1_1","evtType","INTERACTION_EVENTS_2_1","disabled","ICON_ROLE","label","content","isEnterKey","key","keyCode","type","preventDefault"],"sources":["foundation.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}