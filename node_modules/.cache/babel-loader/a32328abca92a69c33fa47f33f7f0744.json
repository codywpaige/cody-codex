{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __assign, __extends } from \"tslib\";\nimport { MDCFoundation } from '@material/base/foundation';\nimport { cssClasses, strings } from './constants';\n\nvar MDCTextFieldCharacterCounterFoundation =\n/** @class */\nfunction (_super) {\n  __extends(MDCTextFieldCharacterCounterFoundation, _super);\n\n  function MDCTextFieldCharacterCounterFoundation(adapter) {\n    return _super.call(this, __assign(__assign({}, MDCTextFieldCharacterCounterFoundation.defaultAdapter), adapter)) || this;\n  }\n\n  Object.defineProperty(MDCTextFieldCharacterCounterFoundation, \"cssClasses\", {\n    get: function () {\n      return cssClasses;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MDCTextFieldCharacterCounterFoundation, \"strings\", {\n    get: function () {\n      return strings;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MDCTextFieldCharacterCounterFoundation, \"defaultAdapter\", {\n    /**\n     * See {@link MDCTextFieldCharacterCounterAdapter} for typing information on parameters and return types.\n     */\n    get: function () {\n      return {\n        setContent: function () {\n          return undefined;\n        }\n      };\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  MDCTextFieldCharacterCounterFoundation.prototype.setCounterValue = function (currentLength, maxLength) {\n    currentLength = Math.min(currentLength, maxLength);\n    this.adapter.setContent(currentLength + \" / \" + maxLength);\n  };\n\n  return MDCTextFieldCharacterCounterFoundation;\n}(MDCFoundation);\n\nexport { MDCTextFieldCharacterCounterFoundation }; // tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\n\nexport default MDCTextFieldCharacterCounterFoundation;","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;AAuBA,SAAQA,aAAR,QAA4B,2BAA5B;AAEA,SAAQC,UAAR,EAAoBC,OAApB,QAAkC,aAAlC;;AAEA;AAAA;AAAA;EAA4DC;;EAkB1D,gDAAYC,OAAZ,EAAkE;WAChEC,wCAAUC,sCAAsC,CAACC,cAAjD,GAAoEH,OAApE,MAA6E;EAC9E;;EAnBDI,sBAAoBF,sCAApB,EAAoB,YAApB,EAA8B;SAA9B;MACE,OAAOL,UAAP;IACD,CAF6B;qBAAA;;EAAA,CAA9B;EAIAO,sBAAoBF,sCAApB,EAAoB,SAApB,EAA2B;SAA3B;MACE,OAAOJ,OAAP;IACD,CAF0B;qBAAA;;EAAA,CAA3B;EAOAM,sBAAoBF,sCAApB,EAAoB,gBAApB,EAAkC;IAHlC;;;SAGA;MACE,OAAO;QACLG,UAAU,EAAE;UAAM;QAAS;MADtB,CAAP;IAGD,CAJiC;qBAAA;;EAAA,CAAlC;;EAUAH,6EAAgBI,aAAhB,EAAuCC,SAAvC,EAAwD;IACtDD,aAAa,GAAGE,IAAI,CAACC,GAAL,CAASH,aAAT,EAAwBC,SAAxB,CAAhB;IACA,KAAKP,OAAL,CAAaK,UAAb,CAA2BC,aAAa,QAAb,GAAmBC,SAA9C;EACD,CAHD;;EAIF;AAAC,CA1BD,CAA4DX,aAA5D;;mDA4BA;;AACA,eAAeM,sCAAf","names":["MDCFoundation","cssClasses","strings","__extends","adapter","_super","MDCTextFieldCharacterCounterFoundation","defaultAdapter","Object","setContent","currentLength","maxLength","Math","min"],"sources":["foundation.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}