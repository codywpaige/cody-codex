{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __extends } from \"tslib\";\nimport { MDCComponent } from '@material/base/component';\nimport { MDCTextFieldIconFoundation } from './foundation';\n\nvar MDCTextFieldIcon =\n/** @class */\nfunction (_super) {\n  __extends(MDCTextFieldIcon, _super);\n\n  function MDCTextFieldIcon() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  MDCTextFieldIcon.attachTo = function (root) {\n    return new MDCTextFieldIcon(root);\n  };\n\n  Object.defineProperty(MDCTextFieldIcon.prototype, \"foundationForTextField\", {\n    // Provided for access by MDCTextField component\n    get: function () {\n      return this.foundation;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  MDCTextFieldIcon.prototype.getDefaultFoundation = function () {\n    var _this = this; // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.\n    // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.\n    // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.\n\n\n    var adapter = {\n      getAttr: function (attr) {\n        return _this.root.getAttribute(attr);\n      },\n      setAttr: function (attr, value) {\n        return _this.root.setAttribute(attr, value);\n      },\n      removeAttr: function (attr) {\n        return _this.root.removeAttribute(attr);\n      },\n      setContent: function (content) {\n        _this.root.textContent = content;\n      },\n      registerInteractionHandler: function (evtType, handler) {\n        return _this.listen(evtType, handler);\n      },\n      deregisterInteractionHandler: function (evtType, handler) {\n        return _this.unlisten(evtType, handler);\n      },\n      notifyIconAction: function () {\n        return _this.emit(MDCTextFieldIconFoundation.strings.ICON_EVENT, {}\n        /* evtData */\n        , true\n        /* shouldBubble */\n        );\n      }\n    }; // tslint:enable:object-literal-sort-keys\n\n    return new MDCTextFieldIconFoundation(adapter);\n  };\n\n  return MDCTextFieldIcon;\n}(MDCComponent);\n\nexport { MDCTextFieldIcon };","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;AAuBA,SAAQA,YAAR,QAA2B,0BAA3B;AAEA,SAAQC,0BAAR,QAAyC,cAAzC;;AAIA;AAAA;AAAA;EAAsCC;;EAAtC;;EA6BC;;EA5BiBC,4BAAhB,UAAyBC,IAAzB,EAAsC;IACpC,OAAO,IAAID,gBAAJ,CAAqBC,IAArB,CAAP;EACD,CAFe;;EAKhBC,sBAAIF,0BAAJ,EAAI,wBAAJ,EAA0B;IAD1B;SACA;MACE,OAAO,KAAKG,UAAZ;IACD,CAFyB;qBAAA;;EAAA,CAA1B;;EAISH,kDAAT;IAAA,kBACE;IACA;IACA;;;IACA,IAAMI,OAAO,GAA4B;MACvCC,OAAO,EAAE,UAACC,IAAD,EAAK;QAAK,YAAI,CAACL,IAAL,CAAUM,YAAV,CAAuBD,IAAvB;MAA4B,CADR;MAEvCE,OAAO,EAAE,UAACF,IAAD,EAAOG,KAAP,EAAY;QAAK,YAAI,CAACR,IAAL,CAAUS,YAAV,CAAuBJ,IAAvB,EAA6BG,KAA7B;MAAmC,CAFtB;MAGvCE,UAAU,EAAE,UAACL,IAAD,EAAK;QAAK,YAAI,CAACL,IAAL,CAAUW,eAAV,CAA0BN,IAA1B;MAA+B,CAHd;MAIvCO,UAAU,EAAE,UAACC,OAAD,EAAQ;QAClBC,KAAI,CAACd,IAAL,CAAUe,WAAV,GAAwBF,OAAxB;MACD,CANsC;MAOvCG,0BAA0B,EAAE,UAACC,OAAD,EAAUC,OAAV,EAAiB;QAAK,YAAI,CAACC,MAAL,CAAYF,OAAZ,EAAqBC,OAArB;MAA6B,CAPxC;MAQvCE,4BAA4B,EAAE,UAACH,OAAD,EAAUC,OAAV,EAAiB;QAAK,YAAI,CAACG,QAAL,CAAcJ,OAAd,EAAuBC,OAAvB;MAA+B,CAR5C;MASvCI,gBAAgB,EAAE;QAAM,YAAI,CAACC,IAAL,CACpB1B,0BAA0B,CAAC2B,OAA3B,CAAmCC,UADf,EAC2B;QAAG;QAD9B,EAC6C;QAAK;QADlD;MACqE;IAVtD,CAAzC,CAJF,CAgBE;;IACA,OAAO,IAAI5B,0BAAJ,CAA+BM,OAA/B,CAAP;EACD,CAlBQ;;EAmBX;AAAC,CA7BD,CAAsCP,YAAtC","names":["MDCComponent","MDCTextFieldIconFoundation","__extends","MDCTextFieldIcon","root","Object","foundation","adapter","getAttr","attr","getAttribute","setAttr","value","setAttribute","removeAttr","removeAttribute","setContent","content","_this","textContent","registerInteractionHandler","evtType","handler","listen","deregisterInteractionHandler","unlisten","notifyIconAction","emit","strings","ICON_EVENT"],"sources":["component.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}